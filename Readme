Link to the benchmarks: https://drive.google.com/file/d/1IZNO8ZMyz1O4BXKrTDfsxioCD1zvT9YD/view?usp=sharing
Functional Demo: https://colab.research.google.com/drive/1mSp0ohwvwehncNZPybjUG5finsovGsX_?usp=sharing

DPLL

For the dpll sat solver there is no need for any installation of packages,
You will require a Python IDE, for example Pycharm to use it

To run in, simply run it in the IDE and it will output the solutions to SAT formulas in the terminal
If you wish to change the SAT formula, you have to change it yourself in the code, specifically in lines 134+.

You will have the following code:
clauses = [[1, -2], [-1, 2], [2, 3]]

if you wish to change the clauses, just overwrite what comes after "clauses="

the clauses are written in the format:
[[1, -2], [-1, 2], [2, 3]]
which can be translated into:
[[x1, -x2], [-x1, x2], [x2, x3]]
or
[[a, -b], [-a, b], [b, c]]

CDCL

For the cdcl sat solver there is no need for any installation of packages,
You will require a Python IDE, for example Pycharm to use it

To run in, simply run it in the IDE and it will output the solutions to SAT formulas in the terminal

You may choose to change the branching algorithm.
You have the following branching algorithms:
"first": chooses the first literal in order
"frequent": chooses the most frequent literal first
"random": chooses a random literal
"vsids": chooses a literal based on a score that lowers after every loop but rises whenever a literal creates a conflict

to change the used branching algorithm, simply change the string after "branching_strategy=" to any of the above


If you wish to change the SAT formula, you have to change it yourself in the code, specifically in lines 145+.

You will have the following code:
clauses = [[1, -2], [-1, 2], [2, 3]]

if you wish to change the clauses, just overwrite what comes after "clauses="

Theory Solver (Z3)

The theory solver will require you to installa package as it uses resources from the z3 solver.
You will only have to install it once. 
To install it, open the IDE's terminal and type: "!pip install z3-solver"
It will then install z3.

To run in, simply run it in the IDE and it will output the solutions to the constraints in the terminal

To change the constraints, you will have to modify them in the code yourself, specifically in line 53+.
You will have the following code:
You may add, remove or edit the constraints.

# variables
  x = ts.add_variable("x", "Int")
  y = ts.add_variable("y", "Int")

# constraints
  ts.add_constraint(x + y > 0)
  ts.add_constraint(x - y < 5)
  ts.add_constraint(x >= 0)


SMT
